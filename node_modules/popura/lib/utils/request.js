'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.requestRaw = requestRaw;
exports.requestApi = requestApi;
exports.requestList = requestList;
exports.postXml = postXml;

var _got = require('got');

var _got2 = _interopRequireDefault(_got);

var _xml2jsEs6Promise = require('xml2js-es6-promise');

var _xml2jsEs6Promise2 = _interopRequireDefault(_xml2jsEs6Promise);

var _cleanApiData = require('./clean-api-data');

var _cleanApiData2 = _interopRequireDefault(_cleanApiData);

var _cleanListData = require('./clean-list-data');

var _cleanListData2 = _interopRequireDefault(_cleanListData);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = require('debug')('popura:request');
var pkg = require('../../package.json');

var userAgent = 'popura/' + pkg.version + ' (https://github.com/lubien/popura)';

/**
 * HTTP Request a page from MAL
 *
 * @param  {string} - Basic Authentication token
 * @param  {string} url = '/'
 * @param  {object} opts = {} - Request options
 * @return {Promise} - Resolves to the raw request body
 */
function requestRaw(authToken) {
	var url = arguments.length <= 1 || arguments[1] === undefined ? '/' : arguments[1];
	var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	debug('Requesting ' + url + ' with. Use auth: ' + Boolean(authToken) + '. Query', opts.query);
	return (0, _got2.default)('http://myanimelist.net' + url, Object.assign(opts, {
		headers: {
			Authorization: 'Basic ' + authToken,
			'User-Agent': userAgent
		}
	}));
}

// TODO: function requestHtml()

/**
 * Request MAL's API XML, then parses as JSON and clean it
 *
 * @param  {string} - Basic Authentication token
 * @param  {string} url = '/'
 * @param  {object} opts = {} - Request options
 * @return {Promise} - Resolves to a parsed as JSON and
 * cleaned version of MAL's API response
 */
function requestApi(authToken) {
	var url = arguments.length <= 1 || arguments[1] === undefined ? '/' : arguments[1];
	var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	if (!authToken) {
		debug('Not authenticated');
		throw new Error('Must have username and password set to access the API');
	}

	return requestRaw(authToken, '/api' + url, opts).then(function (res) {
		return (0, _xml2jsEs6Promise2.default)(res.body);
	}).then(function (parsedXml) {
		return Promise.resolve((0, _cleanApiData2.default)(parsedXml));
	});
}

/**
 * Request an user anime/manga list
 *
 * @param  {string} authToken - Basic Authentication token
 * @param  {string} type - List type: 'anime' or 'manga'
 * @param  {string} username - MAL username
 * @return {Promise} - Resolves to {myinfo: {...}, list: [...]}
 * where myinfo constains info about the user and the list.
 */
function requestList(authToken, type, username) {
	debug('Requesting ' + type + 'list of ' + username);
	return requestRaw(authToken, '/malappinfo.php', {
		query: {
			u: username,
			type: type
		}
	}).then(function (res) {
		return (0, _xml2jsEs6Promise2.default)(res.body);
	}).then(function (parsedXml) {
		if (parsedXml.myanimelist.error) {
			throw new Error(parsedXml.myanimelist.error);
		}
		return Promise.resolve(parsedXml);
	}).then(function (parsedXml) {
		return Promise.resolve((0, _cleanListData2.default)(parsedXml));
	});
}

/**
 * Sends XML to the MAL API
 *
 * @param  {string} - Basic Authentication token
 * @param  {string} url = '/'
 * @param  {object} opts = {} - Request options
 * @return {Promise} - Resolves to the raw request.body
 */
function postXml(authToken) {
	var url = arguments.length <= 1 || arguments[1] === undefined ? '/' : arguments[1];
	var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	var expects = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];

	debug('Posting in MAL\'s API at ' + url);

	var checkerFunction = void 0;
	if (expects) {
		if (typeof expects === 'string') {
			checkerFunction = function checkerFunction(body) {
				return body.includes(expects);
			};
		} else {
			checkerFunction = expects;
		}
	}

	return (0, _got2.default)('http://myanimelist.net/api' + url, Object.assign(opts, {
		method: 'POST',
		headers: {
			Authorization: 'Basic ' + authToken,
			'User-Agent': userAgent,
			'Content-Type': 'application/x-www-form-urlencoded'
		}
	})).then(function (res) {
		var body = res.body || '';
		if (expects && !checkerFunction(body)) {
			debug('Post was expecting ' + expects + ' instead got', body);
			throw new Error('Unespected return from MAL server posting at ' + url);
		}
		Promise.resolve(body);
	});
}