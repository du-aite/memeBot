'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = cleanListData;

var _flattenObject = require('./flatten-object');

var _flattenObject2 = _interopRequireDefault(_flattenObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Clean data requested from anime/manga lists
 *
 * @example
 * cleanListData({ myanimelist: { myinfo: [ [Object] ], anime: [ [Object], [Object] ] } })
 * cleanListData({ myanimelist: { myinfo: [ [Object] ], manga: [ [Object], [Object] ] } })
 * cleanListData({ myanimelist: { myinfo: [ [Object] ] } }) // sometimes you don't have animes/mangas
 *
 * @param  {object} data - MyAnimeList's list parsed XML
 * @return {object} - { myinfo: {...}, list: [...] }
 */
function cleanListData(_ref) {
	var _ref$myanimelist = _ref.myanimelist;
	var myinfo = _ref$myanimelist.myinfo;
	var anime = _ref$myanimelist.anime;
	var manga = _ref$myanimelist.manga;

	if (!myinfo) {
		throw new Error('No \'myinfo\' field in list data therefore, it\'s an invalid list');
	}

	var newData = {
		myinfo: (0, _flattenObject2.default)(myinfo[0]),
		list: []
	};

	/**
  * Verificate if the type of the list being parsed is an anime, manga
  * or if the list is empty, type is false.
  */
	var type = void 0;
	if (anime) {
		type = anime;
	} else if (manga) {
		type = manga;
	} else {
		type = false;
	}

	if (type) {
		type.forEach(function (item) {
			newData.list.push((0, _flattenObject2.default)(item));
		});
	}

	return newData;
}
module.exports = exports['default'];